#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Nov 26 04:07:07 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn php artisan install:faveo
match_max 100000
expect -exact "\r
 ______                      _    _      _           _           _    \r
|  ____|                    | |  | |    | |         | |         | |   \r
| |__ __ ___   _____  ___   | |__| | ___| |_ __   __| | ___  ___| | __\r
|  __/ _` \\ \\ / / _ \\/ _ \\  |  __  |/ _ \\ | '_ \\ / _` |/ _ \\/ __| |/ /\r
| | | (_| |\\ V /  __/ (_) | | |  | |  __/ | |_) | (_| |  __/\\__ \\   < \r
|_|  \\__,_| \\_/ \\___|\\___/  |_|  |_|\\___|_| .__/ \\__,_|\\___||___/_|\\_\\\r
                                          | |                         \r
                                          |_|                         \r
\r
+-----------+----------------------+\r
|\[32m Extension \[39m|\[32m Status               \[39m|\r
+-----------+----------------------+\r
| curl      | Loading              |\r
| ctype     | Loading              |\r
| imap      | Loading              |\r
| mbstring  | Loading              |\r
| openssl   | Loading              |\r
| tokenizer | Loading              |\r
| zip       | Loading              |\r
| pdo       | Loading              |\r
| mysqli    | Loading              |\r
| bcmath    | Loading              |\r
| iconv     | Loading              |\r
| XML       | Loading              |\r
| json      | Loading              |\r
| fileinfo  | Loading              |\r
| PHP       | PHP version supports |\r
+-----------+----------------------+\r
\r
 \[32mDo you want to intall faveo? (yes/no)\[39m \[\[33mno\[39m\]:\r
 > "
send -- "yes\r"
expect -exact "yes\r
\r
 \[32mWhich sql engine would you like to use?\[39m:\r
  \[\[33m0\[39m\] mysql\r
 > "
send -- "0"
expect -exact "0\[K"
send -- "\r"
expect -exact "\r
\r
 \[32mEnter your sql host\[39m:\r
 > "
send -- "localhost\r"
expect -exact "localhost\r
\r
 \[32mEnter your database name\[39m:\r
 > "
send -- "faveo\r"
expect -exact "faveo\r
\r
 \[32mEnter your database username\[39m:\r
 > "
send -- "faveo\r"
expect -exact "faveo\r
\r
 \[32mEnter your database password (blank if not entered)\[39m \[\]:\r
 > "
send -- "DB_PASS"
expect -exact "DB_PASS"
send -- "\r"
expect -exact "\r
\r
 \[32mEnter your sql port (blank if not entered)\[39m \[\]:\r
 > "
send -- "3306\r"
expect eof
